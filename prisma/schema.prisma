// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  email       String     @unique
  password    String
  firstName   String
  lastName    String
  role        String?    @default("USER")
  address     String?
  phoneNumber String?
  orders      Order[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Comment     Comment[]
  Question    Question[]
}

model Order {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  status        String
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.ObjectId
  orderProducts OrderProduct[]
}

model OrderProduct {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  productId String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Product {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  brand        String
  description  String
  price        Float
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String         @db.ObjectId
  options      Option[]
  OrderProduct OrderProduct[]
  features     Feature[]
  Comment      Comment[]
  Question     Question[]
  Coupon       Coupon[]
}

model Feature {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  value      String
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  productId  String?  @db.ObjectId
  Product    Product? @relation(fields: [productId], references: [id])
}

model Category {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String      @unique
  products      Product[]
  Variation     Variation[]
  Feature       Feature[]
  Coupon        Coupon[]
  parentId      String?     @db.ObjectId
  parent        Category?   @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategories Category[]  @relation("CategoryToCategory")
}

model Option {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  value      String
  price      Float?
  slug       String            @unique
  productId  String            @db.ObjectId
  product    Product           @relation(fields: [productId], references: [id])
  variations VariationOption[]
  discounts  Discount[]
  images     Image[]
  rate       Float?            @default(0.0)
  quantity   Int?              @default(0)
  Comment    Comment[]
  Coupon     Coupon[]
}

model Variation {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  type            String
  productId       String            @db.ObjectId
  categoryId      String            @db.ObjectId
  category        Category          @relation(fields: [categoryId], references: [id])
  VariationOption VariationOption[]
}

model VariationOption {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  optionId    String    @db.ObjectId
  option      Option    @relation(fields: [optionId], references: [id])
  variationId String    @db.ObjectId
  variation   Variation @relation(fields: [variationId], references: [id])
}

model Slider {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  description String @unique
  imageId     String @unique @db.ObjectId
  image       Image  @relation(fields: [imageId], references: [id])
  order       Int    @default(0)
}

model Image {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  urls     String[]
  main     Boolean  @default(false)
  optionId String?  @db.ObjectId
  option   Option?  @relation(fields: [optionId], references: [id])
  sliderId String?  @db.ObjectId
  slider   Slider?
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  optionId  String   @db.ObjectId
  option    Option   @relation(fields: [optionId], references: [id])
  content   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Discount {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  optionId  String   @db.ObjectId
  rate      Float
  startDate DateTime
  endDate   DateTime
  option    Option   @relation(fields: [optionId], references: [id])
}

model Coupon {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  code       String    @unique
  rate       Float
  startDate  DateTime
  endDate    DateTime
  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])
  optionId   String?   @db.ObjectId
  option     Option?   @relation(fields: [optionId], references: [id])
  productId  String?   @db.ObjectId
  product    Product?  @relation(fields: [productId], references: [id])
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  content   String
  answer    String?
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
}
