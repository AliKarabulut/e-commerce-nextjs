// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  email                   String                 @unique
  emailVerified           DateTime?
  password                String
  name                    String?
  address                 String?
  phoneNumber             String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  role                    UserRole               @default(USER)
  accounts                Account[]
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?
}

model Product {
  id                    String      @id @default(auto()) @map("_id") @db.ObjectId
  name                  String      @unique
  brand                 String
  description           String
  category              Category    @relation(fields: [categoryId], references: [id])
  categoryId            String      @db.ObjectId
  feature               Feature     @relation(fields: [featureId], references: [id])
  featureId             String      @db.ObjectId
  images                Image[]
  VariantOptionRelation Inventory[]
}

model Variant {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String            @unique
  slug             String            @unique
  categoryVariants CategoryVariant[]
  VariantOption    VariantOption[]
  Image            Image[]
}

model VariantOption {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String            @unique
  slug             String            @unique
  variantId        String            @db.ObjectId
  variant          Variant           @relation(fields: [variantId], references: [id])
  inventoryOptions InventoryOption[]
}

model Category {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String            @unique
  slug             String            @unique
  products         Product[]
  categoryVariants CategoryVariant[]
  parentId         String?           @db.ObjectId
  parent           Category?         @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategories    Category[]        @relation("CategoryToCategory")
  features         Feature[]
}

model CategoryVariant {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  variantId  String   @db.ObjectId
  variant    Variant  @relation(fields: [variantId], references: [id])
}

model Inventory {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  productId        String            @db.ObjectId
  product          Product           @relation(fields: [productId], references: [id])
  stock            Int
  price            Float
  Image            Image[]
  inventoryOptions InventoryOption[]
}

model InventoryOption {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  inventoryId     String        @db.ObjectId
  inventory       Inventory     @relation(fields: [inventoryId], references: [id])
  variantOptionId String        @db.ObjectId
  variantOption   VariantOption @relation(fields: [variantOptionId], references: [id])
}

model Feature {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  slug        String    @unique
  products    Product[]
  parentId    String?   @db.ObjectId
  parent      Feature?  @relation("FeatureToFeature", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subFeatures Feature[] @relation("FeatureToFeature")
  categoryId  String    @db.ObjectId
  category    Category  @relation(fields: [categoryId], references: [id])
}

model Image {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  urls        String[]
  main        Boolean    @default(false)
  variantId   String?    @db.ObjectId
  variant     Variant?   @relation(fields: [variantId], references: [id])
  sliderId    String?    @db.ObjectId
  slider      Slider?
  Product     Product?   @relation(fields: [productId], references: [id])
  productId   String?    @db.ObjectId
  Inventory   Inventory? @relation(fields: [inventoryId], references: [id])
  inventoryId String?    @db.ObjectId
}

model Slider {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  description String @unique
  imageId     String @unique @db.ObjectId
  image       Image  @relation(fields: [imageId], references: [id])
  order       Int    @default(0)
}

// model Comment {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String   @db.ObjectId
//   user      User     @relation(fields: [userId], references: [id])
//   optionId  String   @db.ObjectId
//   content   String
//   approved  Boolean  @default(false)
//   createdAt DateTime @default(now())
//   Product   Product? @relation(fields: [productId], references: [id])
//   productId String?  @db.ObjectId
// }

// model Coupon {
//   id         String    @id @default(auto()) @map("_id") @db.ObjectId
//   code       String    @unique
//   rate       Float
//   startDate  DateTime
//   endDate    DateTime
//   categoryId String?   @db.ObjectId
//   category   Category? @relation(fields: [categoryId], references: [id])
//   optionId   String?   @db.ObjectId
//   productId  String?   @db.ObjectId
//   product    Product?  @relation(fields: [productId], references: [id])
// }

// model Question {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String   @db.ObjectId
//   user      User     @relation(fields: [userId], references: [id])
//   productId String   @db.ObjectId
//   product   Product  @relation(fields: [productId], references: [id])
//   content   String
//   answer    String?
//   approved  Boolean  @default(false)
//   createdAt DateTime @default(now())
// }

// AUTH

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String
  oldEmail String?
  token    String   @unique
  expires  DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model EmailChangeToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
