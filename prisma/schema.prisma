// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  email                   String                 @unique
  emailVerified           DateTime?
  password                String
  name                    String?
  address                 String?
  phoneNumber             String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  role                    UserRole               @default(USER)
  accounts                Account[]
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?
}

model Product {
  id                    String      @id @default(auto()) @map("_id") @db.ObjectId
  name                  String      @unique
  brand                 String
  description           String
  categoryId            String      @db.ObjectId
  featureId             String      @db.ObjectId
  images                Image[]
}


model Image {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  urls        String[]
  main        Boolean    @default(false)
  variantId   String?    @db.ObjectId
  sliderId    String?    @db.ObjectId
  slider      Slider?
  Product     Product?   @relation(fields: [productId], references: [id])
  productId   String?    @db.ObjectId
  inventoryId String?    @db.ObjectId
}

model Slider {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  description String @unique
  imageId     String @unique @db.ObjectId
  image       Image  @relation(fields: [imageId], references: [id])
  order       Int    @default(0)
}

// model Comment {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String   @db.ObjectId
//   user      User     @relation(fields: [userId], references: [id])
//   optionId  String   @db.ObjectId
//   content   String
//   approved  Boolean  @default(false)
//   createdAt DateTime @default(now())
//   Product   Product? @relation(fields: [productId], references: [id])
//   productId String?  @db.ObjectId
// }

// model Coupon {
//   id         String    @id @default(auto()) @map("_id") @db.ObjectId
//   code       String    @unique
//   rate       Float
//   startDate  DateTime
//   endDate    DateTime
//   categoryId String?   @db.ObjectId
//   category   Category? @relation(fields: [categoryId], references: [id])
//   optionId   String?   @db.ObjectId
//   productId  String?   @db.ObjectId
//   product    Product?  @relation(fields: [productId], references: [id])
// }

// model Question {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String   @db.ObjectId
//   user      User     @relation(fields: [userId], references: [id])
//   productId String   @db.ObjectId
//   product   Product  @relation(fields: [productId], references: [id])
//   content   String
//   answer    String?
//   approved  Boolean  @default(false)
//   createdAt DateTime @default(now())
// }

// AUTH

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String
  oldEmail String?
  token    String   @unique
  expires  DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model EmailChangeToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
